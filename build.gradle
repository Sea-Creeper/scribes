plugins {
    id 'org.springframework.boot' version '2.5.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'com.seacreeper'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/milestone' }
}

ext {
    set('springCloudVersion', "2020.0.3-SNAPSHOT")
    set('testcontainersVersion', "1.15.3")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
//	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
//	implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.data:spring-data-rest-hal-explorer'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'com.influxdb:influxdb-client-java:2.3.0'
    implementation 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
//	runtimeOnly 'io.micrometer:micrometer-registry-influx'
//	runtimeOnly 'org.postgresql:postgresql'
//	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:kafka'
    testImplementation 'org.testcontainers:postgresql'
}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

bootJar {
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

